datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  username     String        @unique @db.VarChar(255)
  phoneNumber  Int?          @unique
  zipCode      Int?
  posts        Post[]
  profile      Profile?
  role         Role          @default(USER)
  status       StatusType    @default(ACTIVE)
  blockExpires DateTime?
  membership   Membership?
  events       Event[]
  teams        TeamAccepts[]
  camp         Camp?
  password     String
}

model Profile {
  id          Int       @id @default(autoincrement())
  bio         String?
  user        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      Int       @unique
  avatar      String?
  headerImage String?
  wallet      Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLogin   DateTime?
  isPublic    Boolean   @default(false)
  social      Json?
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId   Int        @unique
  categories Category[]
}

model Category {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
}

model Camp {
  createdAt   DateTime @default(now())
  id          Int      @id @default(autoincrement())
  name        String   @unique
  contactInfo String?
  avatar      String?
  headerImage String?
  isOpen      Boolean  @default(false)
  isPublic    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      Int      @unique
}

model Membership {
  createdAt   DateTime     @default(now())
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      Int          @unique
  memberType  MemberType[]
  isActive    Boolean      @default(true)
  startedAt   DateTime     @default(now())
  expiresAt   DateTime
  FeeInterval DateTime
  tokenFee    Float
}

model Event {
  id         String   @id @default(uuid())
  title      String
  subText    String?
  href       String
  tokenFee   Float
  eventStart DateTime
  eventEnd   DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId     Int      @unique
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String
  teamDetails String?

  members TeamAccepts[]
}

model TeamAccepts {
  createdAt DateTime @default(now())
  role      Role

  userId Int
  teamId Int
  user   User @relation(fields: [userId], references: [id])
  team   Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
  @@index([userId, role])
}

enum StatusType {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum MemberType {
  MEMBER
  SUPPORT
  CREW
  ALLYEARCREW
  ARTIST
  NEIGHBOUR
  FREEBEE
}

enum Role {
  USER
  CREW
  CREWMANAGER
  COORDINATOR
  HAND
  ALLADMIN
  ADMIN
}

enum TeamName {
  BESTYRELSE
  OEKONOMI
  BETABAR
  WEBIT
  ALTERNABAR
  PR
  BOBSMOODS
  LOGISTIK
  TEKNIK
  KONFERENCIER
  KOEKKEN
  BOOKING
  MEDIC
  BANDCARE
  EXITCREW
  CHECKIN
  MOKKAMOK
  RENOVATION
  LAEKKERBIXEN
  BAGER
  OPVASK
  KREA
  OPNEDMAD
  CHILL
}
